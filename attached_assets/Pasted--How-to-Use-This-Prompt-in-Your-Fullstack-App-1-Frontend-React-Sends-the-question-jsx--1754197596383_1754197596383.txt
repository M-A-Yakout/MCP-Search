💡 How to Use This Prompt in Your Fullstack App
1. Frontend (React) – Sends the question
jsx


1
2
3
4
5
⌄
const response = await fetch('/api/mcp-search', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ question: "Does coffee raise blood pressure?" })
});
2. Backend (Node.js) – Runs the full MCP logic
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
⌄
⌄
// Example: /api/mcp-search
app.post('/api/mcp-search', async (req, res) => {
  const { question } = req.body;

  // Step 1: Search (using SerpApi, Google Custom Search, etc.)
  const searchResults = await googleSearch(question);

  // Step 2: Format results
  const formattedResults = searchResults.map(r => 
    `- Title: ${r.title}\n  Snippet: ${r.snippet}\n  Link: ${r.link}\n`
  ).join("\n");

  // Step 3: Inject into MCP Prompt
  const prompt = `
    [PASTE THE FULL MCP PROMPT ABOVE]
    User Question: "${question}"
    Search Results:
    ${formattedResults}
  `;

  // Step 4: Call LLM
  const aiResponse = await openai.chat.completions.create({
    model: "gpt-4-turbo",
    messages: [{ role: "user", content: prompt }],
    temperature: 0.3,
    max_tokens: 512,
  });

  const finalAnswer = aiResponse.choices[0].message.content;

  // Step 5: Send back to React
  res.json({ answer: finalAnswer });
});
✅ Example: Input & Output
User Question (Arabic):
"هل القهوة ترفع ضغط الدم؟" 

Search Results (from backend):


1
2
3
1. Mayo Clinic: "Caffeine can cause a short-term rise in blood pressure..."
2. WebMD: "For most people, caffeine does not significantly affect BP long-term."
3. Forum Post: "أنا أشرب قهوة ولا عنديش مشكلة"
AI Response (in Arabic):


1
2
✅ Best Answer: نعم، القهوة قد ترفع ضغط الدم بشكل مؤقت بسبب الكافيين، خاصة لدى الأشخاص غير المعتادين عليه، لكن التأثير يختلف من شخص لآخر.
📌 Source Reasoning: استندت الإجابة إلى مصدر طبي موثوق (Mayo Clinic) مقارنة برأي شخصي من منتدى.
✅ Key Features of This Prompt
🔤 Multi-language support
Works with Arabic, English, French, Spanish, etc.
🧠 Logical reasoning
Doesn’t just summarize — it judges and selects
🛡️ Anti-hallucination
Forces reliance on real results
🎯 Single best answer
No confusion from multiple options
📚 Source-aware
Prefers .gov, .edu, journals
🧩 Plug-and-play
Works with React + Node.js + OpenAI/Gemini

✅ Next Steps (What You Should Do Now)
✅ Copy the prompt above and save it in your backend (e.g., mcpPrompt.js).
✅ Set up:
OpenAI / Gemini API key
Google Search API (like SerpApi or Google Custom Search JSON API )
✅ Connect React → Node.js → Search → LLM → Return Best Answer
✅ Test with questions in Arabic, English, etc.
Need Help With?
🔧 Full GitHub repo structure?
🌐 Auto-detect language in Node.js?
🔐 Securing the API?
📦 Using a local LLM (like Llama3) instead of OpenAI?
Just say: "Yes, help me with [X]" — and I’ll build it step by step with you.

You're not alone — we're building MCP together. 💪